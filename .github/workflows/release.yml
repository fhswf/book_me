name: release

# Run the workflow when a Pull Request is opened or when changes are pushed to master
on:
  pull_request:
  push:
    branches: [main]
    #paths:
    #  - "common/**"

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: cypress/included:13.5.0
      options: --user 1001
    strategy:
      matrix:
        # Run the steps below with the following versions of Node.js
        node-version: [18.x]

    steps:
      # Fetch the latest commit
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node.js using the appropriate version
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # Install package dependencies
      - name: Install
        run: yarn install --immutable

      # Build
      - name: Build
        run: yarn workspace common build

      # Run tests
      - name: Test
        run: yarn workspaces foreach --all run ci

      - name: Test Summary
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            **/TEST-*.xml

  release:
    # Only release on push to master
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install
        run: yarn install --immutable

      - name: Build
        run: yarn workspace common build

      - name: Release
        id: release
        run: yarn exec multi-semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_REGISTRY_USER: ${{ github. actor }}

      - name: Set default (old) release version
        run: echo "RELEASE_VERSION=${{ steps.release.outputs.last_release_version }}" >> $GITHUB_ENV
      - name: Set new release version
        run: echo "RELEASE_VERSION=${{ steps.release.outputs.new_release_version }}" >> $GITHUB_ENV
        if: steps.release.outputs.new_release_published == 'true'
    outputs:
      new_release_published: ${{ steps.release.outputs.new_release_published }}
      new_release_version: ${{ steps.release.outputs.new_release_version }}
      last_release_version: ${{ steps.release.outputs.last_release_version }}
      release_version: ${{ env.RELEASE_VERSION }}

  build:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: ci-install token
        id: cicd
        uses: getsentry/action-github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/fhswf/bookme-client
          # generate Docker tags based on the following events/attributes
          tags: |
            type=sha,prefix=sha-,format=short,enable=true,priority=1100
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=${{ env.RELEASE_VERSION }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: client
          file: client/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Update yaml
        uses: fjogeleit/yaml-update-action@main
        with:
          token: ${{ steps.cicd.outputs.token }}
          valueFile: "k8s/client-deployment.yaml"
          propertyPath: "spec.template.spec.containers[0].image"
          value: ghcr.io/fhswf/openai-ui:${{ env.DOCKER_METADATA_OUTPUT_VERSION }}
          branch: main
          message: "Update image to ${{ env.DOCKER_METADATA_OUTPUT_VERSION }} [skip ci]"
